# -*- coding: utf-8 -*-
"""Breast Cancer Classification with NN

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1P5KD5qtBMnIgyFbCRC-732WcfEakNJZj

Breast Cancer Classification with Neural Networks

# **IMPORTING REQUIRED LIBRARIES**
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import sklearn.datasets
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

"""# **STEP 1: LOADING THE DATASET**
# Load the Breast Cancer dataset from Scikit-learn

"""

breast_cancer_data = sklearn.datasets.load_breast_cancer()

print(breast_cancer_data)

"""# Convert the dataset to a pandas DataFrame for easier manipulation"""

data_Frame = pd.DataFrame(breast_cancer_data.data, columns = breast_cancer_data.feature_names)

data_Frame.head()

"""**adding target column**"""

data_Frame['Label'] = breast_cancer_data.target

data_Frame.tail()

data_Frame.info()

"""# **STEP 2: DATA INSPECTION AND CLEANING**
# Check for null values
"""

data_Frame.isnull().sum()

"""# Basic dataset statistics"""

data_Frame.describe()

"""# Count and group by label"""

data_Frame['Label'].value_counts()

data_Frame.groupby('Label').mean()

"""# **STEP 3: SPLITTING THE DATA**
# Separate features and labels
"""

X = data_Frame.drop(columns = 'Label', axis =1)
y = data_Frame['Label']

print(X)

print(y)

"""# Split the data into training and testing sets"""

X_train, X_test, y_train, y_test = train_test_split(X,y, test_size = 0.2, random_state = 2)

print(X.shape, X_train.shape, X_test.shape)

"""# **STEP 4: DATA STANDARDIZATION**
# Standardize the features using StandardScaler
"""

from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
X_train_std = scaler.fit_transform(X_train)
X_test_std = scaler.transform(X_test)

"""# **STEP 5: BUILDING THE NEURAL NETWORK**
# Set random seed for reproducibility
"""

import tensorflow as tf
tf.random.set_seed(3)
from tensorflow import keras

"""setting up layers of neural netw"""

model = keras.Sequential([
    keras.layers.Flatten(input_shape = (30,)),
    keras.layers.Dense(30, activation='relu'),
    keras.layers.Dense(2, activation='sigmoid')
])

"""# **STEP 6: COMPILING THE NEURAL NETWORK**"""

model.compile(optimizer = 'adam',
              loss ='sparse_categorical_crossentropy',
              metrics = ['accuracy'])

"""# **STEP 7: TRAINING THE NEURAL NETWORK**"""

history = model.fit(X_train_std, y_train, validation_split=0.1, epochs = 20)

"""# **STEP 8: VISUALIZING MODEL PERFORMANCE**
# Plot accuracy
"""

plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.title('model accuracy')
plt.ylabel('accuracy')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='lower right')
plt.show()

"""# Plot loss"""

plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('model loss')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper right')
plt.show()

"""# **STEP 9: EVALUATING THE MODEL**"""

loss, accuracy  = model.evaluate(X_test_std, y_test)
print(loss)
print(accuracy)

print(X_test_std.shape)
print(X_test_std[0])

"""# **STEP 10: MAKING PREDICTIONS**
# Predict probabilities for the test set
"""

Y_predict = model.predict(X_test_std)

print(Y_predict.shape)
print(Y_predict[0])

print(X_test_std)

print(Y_predict)

"""# Convert probabilities to class labels"""

Y_predict_labels = [np.argmax(1) for i in Y_predict]
print(Y_predict_labels)

"""# **STEP 11: BUILDING A PREDICTIVE SYSTEM**"""

input_data = ()
#changing input data to a nnumpy array

input_data_nump_arr = np.asarray(input_data)
#reshaping the arr as we are predicting for one data

input_data_reshape = input_data_nump_arr.reshape(1,-1)

input_data_std = scaler.transform(input_data_reshape)

prediction = model.predict(input_data_std)
print(prediction)

prediction_label = [np.argmax(prediction)]
print(prediction_label)

if (prediction_label[0] == 0):
  print('The breast cancer is Malignant')

else:
  print('The breast cancer is Benign')